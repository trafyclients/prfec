
'use client';

import { useState, useEffect, useRef } from 'react';
import '@styles/ai/BetaAi.css';
import Image from 'next/image';
import Hover from '@public/Images/ai/hover.svg';
import NoHover from '@public/Images/ai/nohover.svg';

export default function PuterChat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [buttonHl, setButtonHl] = useState(false);
  const messagesEndRef = useRef(null);

  // Scroll to bottom when new messages are added
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleInputChange = (event) => {
    const newInput = event.target.value;
    setInput(newInput);
    setButtonHl(newInput.trim() !== ''); // Highlight button if input isn't empty
  };

  const handleSendMessage = async () => {
    if (!input.trim()) return;

    const userMessage = {
      id: Date.now(),
      sender: 'You',
      text: input.trim(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setButtonHl(false); // Reset button highlight
    setIsTyping(true);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: userMessage.text }),
      });

      const data = await response.json();

      if (response.ok) {
        const botMessage = {
          id: Date.now() + 1,
          sender: 'AI',
          text: data.response,
        };
        setMessages((prev) => [...prev, botMessage]);
      } else {
        const errorMessage = {
          id: Date.now() + 1,
          sender: 'AI',
          text: data.error || 'Something went wrong.',
        };
        setMessages((prev) => [...prev, errorMessage]);
      }
    } catch (error) {
      console.error('Error fetching chat:', error);
      const errorMessage = {
        id: Date.now() + 1,
        sender: 'AI',
        text: 'An unexpected error occurred.',
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsTyping(false);
    }
  };

  return (
    <div className="prfec-ai">
      <div className="prfec-ai-container">
        {/* Chat Messages */}

        <div className='ai-dashboard'>
          <div className='ai-dashboard-container'>
            <div className='ai-dashboard-contents'>
              <div className='ai-dashboard-title'>
                <label htmlFor="">Title</label>
                <input type="text" />
              </div>
              <div className='ai-dashboard-description'>
                <label htmlFor="">Meta description</label>
                <input type="text" />
              </div>
              <div className='ai-dashboard-body'>
                <label htmlFor="">Body</label>
                <input type="text" />
              </div>
              <div className='ai-dashboard-category'>
                <input type="text" />
              </div>
            </div>
          </div>
        </div>

        <div className="chat-container">
          {messages.map((msg, index) => {
            const isUser = msg.sender === 'You';
            return (
              <p
                key={index}
                className={`para-text ${isUser ? 'user-message' : 'ai-message'}`}
                dangerouslySetInnerHTML={{
                  __html: msg.text
                    .replace(/You:/, '<strong>You:</strong>')
                    .replace(/AI:/, '<strong>AI:</strong>'),
                }}
              />
            );
          })}

          {isTyping && (
            <div className="loading-skeleton ai-message">
              {/* Skeleton animation while typing */}
              <div className="skeleton-line"></div>
              <div className="skeleton-line"></div>
              <div className="skeleton-line"></div>
            </div>
          )}

          {/* Reference for Scrolling */}
          <div ref={messagesEndRef} />
        </div>

        {/* Chat Input */}
      
      </div>
      <div className="chat-input">
          <div className="chat-input-container">
            <input
              type="text"
              value={input}
              onChange={handleInputChange}
              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Type your message..."
            />
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <Image src={buttonHl ? Hover : NoHover} alt="Button Icon" />
            </div>
          </div>
        </div>
    </div>
  );
}







/* PuterChat.css */

.strong-text {
    font-weight: bold;
    color: #444;
    font-family: var(--h-font);
}

.heading-h3 {
    font-size: 1.2em;
    color: #333;
    margin-top: 10px;
    font-family: var(--h-font);

}

.heading-h2 {
    font-size: 1.5em;
    color: #222;
    margin-top: 15px;
    font-family: var(--h-font);

}

.heading-h1 {
    font-size: 2em;
    color: #111;
    margin-top: 20px;
    font-family: var(--h-font);

}

.list-item {
    list-style-type: disc;
    margin-left: 20px;
    font-family: var(--p-font);

}

.unordered-list {
    font-family: var(--p-font);

}
.para-text{
    font-family: var(--p-font);
}


.prfec-ai{
    position: relative;
    padding: 80px 0px;
    display: flex;
    justify-content: center;
    align-items: center;
}
.prfec-ai-container {
    width: 85%;
    height: 89vh; /* Set a height to ensure the container has boundaries */
    display: flex;
    justify-content: flex-start;
    gap:3rem;
}

/* -----------------------------------------------------AI Dashboard------------------------------------- */
.ai-dashboard {
    width: 300px;
    flex-shrink: 0; /* Prevents shrinking */
  }
  
  .ai-dashboard-container {
    width: 100%;

  }
  
  .ai-dashboard-contents {
    display: flex;
    flex-direction: column;
    gap: 10px; /* Adds spacing between the child elements */
  }
  .ai-dashboard-title,
  .ai-dashboard-description,
  .ai-dashboard-body,
  .ai-dashboard-category{
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 0.4rem;
  }

  .ai-dashboard-title input,
  .ai-dashboard-description input,
  .ai-dashboard-body input,
  .ai-dashboard-category input {
    width: 100%;
    height: 35px;
    border: 1px solid var(--box-border);
    border-radius: 6px;
    padding: 5px; /* Adds inner spacing inside the input */
    font-size: 14px; /* Adjust font size */
  }
  
  .ai-dashboard input:focus {
    outline: none;
    border-color: var(--box--border-hover, #007BFF); /* Optional: Add hover effect on focus */
  }
  
/* ------------------------------------------------------------Chat container-------------------------------------------- */

.chat-container {
    flex-grow: 1; 
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding-bottom: 90px;
    border: 1px solid var(--box-border);
    border-radius: 8px;
}

/* Hide the scrollbar */
.chat-container::-webkit-scrollbar {
    display: none;
}

.ai-message {
    text-align: left;
    background-color: #f1f1f1;
    border-radius: 10px;
    padding: 24px 20px;
}

.user-message {
    text-align: left;
    background-color: #b8ddff;
    color: #fff;
    border-radius: 10px;
    padding: 12px 16px;
}
.chat-input{
    width: 100%;
    position: fixed;
    bottom: 0px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--prfec-white);
    padding-bottom: 16px;
}
.chat-input-container {
    width: 85%;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #fff;
    padding: 6px 14px;
    border: 1px solid var(--box-border);
    border-radius: 14px;
}
.chat-input-container input{
    width: 100%;
    height: 36px;
    margin: 0px;
    border: 0px;
    background-color: inherit;
}

.chat-input-container input:focus {
    outline: none;
    border: 0px; /* Optional: remove the border if you want */
}

.chat-input-container button{
    height: 40px;
    padding: 0px 8px;
    border: 0px;
    background-color: inherit;
}


/* Add this to your ai.css */
.loading-skeleton {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  
  .skeleton-line {
    width: 100%;
    height: 20px;
    background-color: #e0e0e0;
    animation: pulse 1.5s infinite ease-in-out;
    border-radius: 4px;
  }
  
  @keyframes pulse {
    0% {
      background-color: #e0e0e0;
    }
    50% {
      background-color: #c4c4c4;
    }
    100% {
      background-color: #e0e0e0;
    }
  }
  